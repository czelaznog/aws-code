AWSTemplateFormatVersion: 2010-09-09
Description: >
  AWS Data Wrangler Workshop

  Home: github.com/awslabs/aws-data-wrangler
  Docs: aws-data-wrangler.readthedocs.io

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Configurations"
        Parameters:
          - VpcId
          - SubnetId
          - SubnetId2
          - SubnetAz
          - DatabasesPassword

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Redshift VPC ID
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Redshift Subnet ID
  SubnetId2:
    Type: AWS::EC2::Subnet::Id
    Description: Redshift Subnet ID
  SubnetAz:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Subnet AZ
  DatabasesPassword:
    Type: String
    Description: Password for all databases

Resources:

  RedshiftRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - redshift.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: Root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:Get*"
                  - "s3:List*"
                  - "s3:Put*"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "lakeformation:GrantPermissions"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "glue:SearchTables"
                  - "glue:GetConnections"
                  - "glue:GetDataCatalogEncryptionSettings"
                  - "glue:GetTables"
                  - "glue:GetTableVersions"
                  - "glue:GetPartitions"
                  - "glue:DeleteTableVersion"
                  - "glue:BatchGetPartition"
                  - "glue:GetDatabases"
                  - "glue:GetTags"
                  - "glue:GetTable"
                  - "glue:GetDatabase"
                  - "glue:GetPartition"
                  - "glue:GetTableVersion"
                  - "glue:GetConnection"
                  - "glue:GetUserDefinedFunction"
                  - "glue:GetUserDefinedFunctions"
                Resource: "*"

  RedshiftSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: AWS Data Wrangler Workshop - Redshift Subnet Group
      SubnetIds:
        - Ref: SubnetId

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: AWS Data Wrangler Workshop - Redshift security group

  DatabaseSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Self Referencing"
      GroupId: !Ref DatabaseSecurityGroup
      IpProtocol: "-1"
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref DatabaseSecurityGroup

  Redshift:
    Type: AWS::Redshift::Cluster
    DependsOn:
      - DatabaseSecurityGroup
      - RedshiftSubnetGroup
      - RedshiftRole
    Properties:
      DBName: test
      MasterUsername: test
      MasterUserPassword: !Ref DatabasesPassword
      NodeType: dc2.large
      ClusterType: single-node
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup
      ClusterSubnetGroupName: !Ref RedshiftSubnetGroup
      PubliclyAccessible: true
      Port: 5439
      IamRoles:
        - !GetAtt RedshiftRole.Arn

  RdsSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: AWS Data Wrangler Workshop - RDS Database Subnet Group
      SubnetIds:
        - Ref: SubnetId
        - Ref: SubnetId2

  AuroraRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - rds.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: S3GetAndList
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:Get*"
                  - "s3:List*"
                  - "s3:Put*"
                Resource: "*"

  PostgresParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: Postgres 11
      Family: aurora-postgresql11
      Parameters:
        apg_plan_mgmt.capture_plan_baselines: "off"

  AuroraClusterPostgres:
    Type: AWS::RDS::DBCluster
    DependsOn:
      - PostgresParameterGroup
      - AuroraRole
      - RdsSubnetGroup
      - DatabaseSecurityGroup
    Properties:
      Engine: aurora-postgresql
      DBClusterIdentifier : postgres-cluster-wrangler
      MasterUsername: test
      MasterUserPassword: !Ref DatabasesPassword
      BackupRetentionPeriod: 1
      DBSubnetGroupName: !Ref RdsSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup
      DBClusterParameterGroupName: !Ref PostgresParameterGroup
      AssociatedRoles:
        - FeatureName: s3Import
          RoleArn: !GetAtt AuroraRole.Arn

  AuroraInstancePostgres:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora-postgresql
      DBInstanceIdentifier: postgres-instance-wrangler
      DBClusterIdentifier: !Ref AuroraClusterPostgres
      DBInstanceClass: db.t3.medium
      DBSubnetGroupName: !Ref RdsSubnetGroup
      PubliclyAccessible: true

  MysqlParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: Mysql 5.7
      Family: aurora-mysql5.7
      Parameters:
        aurora_load_from_s3_role: !GetAtt AuroraRole.Arn
        aws_default_s3_role: !GetAtt AuroraRole.Arn
        aurora_select_into_s3_role: !GetAtt AuroraRole.Arn

  AuroraClusterMysql:
    Type: AWS::RDS::DBCluster
    DependsOn:
      - MysqlParameterGroup
      - AuroraRole
      - RdsSubnetGroup
      - DatabaseSecurityGroup
    Properties:
      Engine: aurora-mysql
      DBClusterIdentifier: mysql-cluster-wrangler
      MasterUsername: test
      MasterUserPassword: !Ref DatabasesPassword
      BackupRetentionPeriod: 1
      DBSubnetGroupName: !Ref RdsSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup
      DBClusterParameterGroupName: !Ref MysqlParameterGroup
      DatabaseName: test
      AssociatedRoles:
        - RoleArn: !GetAtt AuroraRole.Arn

  AuroraInstanceMysql:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora-mysql
      DBInstanceIdentifier: mysql-instance-wrangler
      DBClusterIdentifier: !Ref AuroraClusterMysql
      DBInstanceClass: db.t3.medium
      DBSubnetGroupName: !Ref RdsSubnetGroup
      PubliclyAccessible: true

  RedshiftGlueConnection:
    Type: AWS::Glue::Connection
    DependsOn:
      - DatabaseSecurityGroup
      - Redshift
    Properties:
      CatalogId: !Ref AWS::AccountId
      ConnectionInput:
        Description: Connect to Redshift.
        ConnectionType: "JDBC"
        PhysicalConnectionRequirements:
          AvailabilityZone: !Ref SubnetAz
          SecurityGroupIdList:
            - !Ref DatabaseSecurityGroup
          SubnetId: !Ref SubnetId
        ConnectionProperties:
          {
            "JDBC_CONNECTION_URL":
              !Join [
                "",
                [
                  "jdbc:redshift://",
                  !GetAtt Redshift.Endpoint.Address,
                  ":",
                  !GetAtt Redshift.Endpoint.Port,
                  "/",
                  test,
                ],
              ],
            "USERNAME": test,
            "PASSWORD": !Ref DatabasesPassword,
          }
        Name: "aws-data-wrangler-redshift"

  PostgresGlueConnection:
    Type: AWS::Glue::Connection
    DependsOn:
      - DatabaseSecurityGroup
      - AuroraInstancePostgres
    Properties:
      CatalogId: !Ref AWS::AccountId
      ConnectionInput:
        Description: Connect to Aurora (PostgreSQL).
        ConnectionType: "JDBC"
        PhysicalConnectionRequirements:
          AvailabilityZone: !Ref SubnetAz
          SecurityGroupIdList:
            - !Ref DatabaseSecurityGroup
          SubnetId: !Ref SubnetId
        ConnectionProperties:
          {
            "JDBC_CONNECTION_URL":
              !Join [
                "",
                [
                  "jdbc:postgresql://",
                  !GetAtt AuroraInstancePostgres.Endpoint.Address,
                  ":",
                  !GetAtt AuroraInstancePostgres.Endpoint.Port,
                  "/",
                  postgres,
                ],
              ],
            "USERNAME": test,
            "PASSWORD": !Ref DatabasesPassword,
          }
        Name: "aws-data-wrangler-postgres"

  MysqlGlueConnection:
    Type: AWS::Glue::Connection
    DependsOn:
      - DatabaseSecurityGroup
      - AuroraInstanceMysql
    Properties:
      CatalogId: !Ref AWS::AccountId
      ConnectionInput:
        Description: Connect to Aurora (MySQL).
        ConnectionType: "JDBC"
        PhysicalConnectionRequirements:
          AvailabilityZone: !Ref SubnetAz
          SecurityGroupIdList:
            - !Ref DatabaseSecurityGroup
          SubnetId: !Ref SubnetId
        ConnectionProperties:
          {
            "JDBC_CONNECTION_URL":
              !Join [
                "",
                [
                  "jdbc:mysql://",
                  !GetAtt AuroraInstanceMysql.Endpoint.Address,
                  ":",
                  !GetAtt AuroraInstanceMysql.Endpoint.Port,
                  "/",
                  test,
                ],
              ],
            "USERNAME": test,
            "PASSWORD": !Ref DatabasesPassword,
          }
        Name: "aws-data-wrangler-mysql"

Outputs:
  RedshiftAddress:
    Value: !GetAtt Redshift.Endpoint.Address
    Description: Redshift address.
  RedshiftPort:
    Value: !GetAtt Redshift.Endpoint.Port
    Description: Redshift Endpoint Port.
  DatabasesPassword:
    Value: !Ref DatabasesPassword
    Description: Password.
  RedshiftRole:
    Value: !GetAtt RedshiftRole.Arn
    Description: Redshift IAM role.
  SubnetId:
    Value: !Ref SubnetId
    Description: Subnet ID
  SubnetId2:
    Value: !Ref SubnetId2
    Description: Subnet ID 2
  PostgresAddress:
    Value: !GetAtt AuroraInstancePostgres.Endpoint.Address
    Description: Postgres Address
  MysqlAddress:
    Value: !GetAtt AuroraInstanceMysql.Endpoint.Address
    Description: Mysql Address
  Region:
    Value: !Ref AWS::Region
    Description: AWS Region